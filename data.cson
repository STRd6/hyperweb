[{
  type: "p"
  text: "Welcome to the world of tomorrow!"
}, {
  type: "button"
  text: "New Image"
  script: """
    @click ->
      editor.addObjectFromData
        type: "img"
        src: "https://trello-attachments.s3.amazonaws.com/54a60b08f586e1cafdef3113/350x247/b4e92ef573aa2723d6b16330fa53548d/HyperCardbird-e1338220256722.jpg"
  """
}, {
  type: "button"
  text: "Greet"
  script: """
    @click ->
      say "Hello"
  """
}, {
  template: """
    %form(@submit)
      %textarea(@value)
      %button Create Object
  """
  script: """
    @value = Observable \"""
      type: "p"
      text: "Click me and I'll remove myself!"
      script: "@click -> editor.remove this"
    \"""

    @submit = (event) ->
      event.preventDefault()

      editor.addObjectFromData CSON.parse @value()
  """
}, {
  template: """
    %p
      Object Count:
      %span= @count
  """
  script: """
    @count = Observable ->
      editor.objects.size()
  """
}, {
  r: 64
  g: 64
  b: 64
  template: """
    %div(@style)
      %input(value=@r)
      %input(value=@g)
      %input(value=@b)
  """
  script: """
    @style = ->
      "background-color: rgb(\#{@r()}, \#{@g()}, \#{@b()})"
  """
}, {
  template: """
    %form
      - console.log "render"
      %button(click=@choose) Choose
      - if fields = @fields()
        - fields.forEach ([key, value]) ->
          %label
            %h2= key
            %input(value=value)
  """
  script: """
    self = this # TODO: This should be set up for us

    @subject = Observable()

    previousTool = null
    chooserTool =
      click: ({event, object}) ->
        event.preventDefault()

        if object
          self.subject object
          editor.tool previousTool

    @choose = (e) ->
      e.preventDefault()

      previousTool = editor.tool()
      editor.tool chooserTool

    # TODO: Field subtemplates

    @fields = ->
      subject = @subject()

      if props = subject?.properties?()
        props.filter (x) ->
          x
  """
}, {
  name: "Calculator"
  template: """
    .calculator
      %input(value=@lcd)
      - @buttonRows.each (row) ->
        .row
          - row.each (button) ->
            %button(click=button.click)= button.text
  """
  script: '''
    self = this

    rows = """
      789/
      456*
      123-
      0.=+
    """

    @buttonRows = rows.split("\\n").map (row) ->
      row.split("").map (c) ->
        if c is "="
          text: c
          click: ->
            self.lcd eval self.lcd()
        else
          text: c
          click: ->
            self.lcd self.lcd() + c

    @lcd = Observable("")
  '''
}]
