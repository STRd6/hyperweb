# Controls
# Context scoping is currently kind of a nightmare here
# The template needs special access to the editor to handle selecting a tool
# The tool event handler context and arguments need some thought

# Should template context be the same as script context? Probably... the fewer
# different contexts the better.

# Another note, the controls currently are using Hamlet template events
# rather than a unified event system with the base objects...

# How should Hamlet/"plain HTML" events be unified with the object event system?
[{
  template: """
    .tools
      - editor = @editor() # TODO: Better context handling of editor?
      - @tools.each (tool) ->
        - select = -> editor.tool tool
        %button(click=select)
          = tool.text
      - @actions.each (action) ->
        %button(click=action.perform)= action.name
  """
  script: """
    # TODO: This require is a path in the editor package
    saveAs = require("./lib/save_as")
    openFile = require("./lib/open_file")

    saveJSON = (name, data) ->
      blob = new Blob [JSON.stringify(data, null, 2)],
        type: "application/json"
      saveAs(blob, "\#{name}.json")

    @tools = Observable [{
      text: "Interact"
      cursor: "pointer"
      click: (params) ->
        if this
          @trigger("click", params)
    }, {
      text: "Copy"
      cursor: "copy"
      click: ({event, object}) ->
        event.preventDefault()

        if object
          editor.addObject object.copy()
    }, {
      text: "Delete"
      cursor: "not-allowed"
      click: ({event, object}) ->
        event.preventDefault()

        if object
          editor.remove object
    }, {
      text: "Inspect"
      cursor: "help"
      click: ({event, object}) ->
        event.preventDefault()

        if object
          say JSON.stringify(object.copy(), null, 2)
    }, {
      text: "Save Object"
      cursor: "alias"
      click: ({object}) ->
        if object
          if name = prompt "Name", "object"
            saveJSON name, object.toJSON()
    }]

    editor.tool(@tools.first())

    @actions = Observable [{
      name: "Save State"
      perform: ->
        saveJSON("app", editor.toJSON())
    }, {
      name: "Load State"
      perform: ->
        openFile(".json").then editor.load
    }, {
      name: "Load Object"
      perform: ->
        openFile(".json").then editor.addObjectFromData
    }, {
      name: "Save App"
      perform: ->
        if name = prompt "Name", "app"
          appData = JSON.stringify(editor.toJSON())
          code = require('require').packageWrapper(PACKAGE, "require('./main').load(\#{appData})")

          # TODO: Better remote deps management
          content = "<html><head><meta charset='utf-8'></head><body><script>\#{code}<\\/script></body></html>"

          blob = new Blob [content],
            type: "text/html"

          saveAs(blob, "\#{name}.html")
    }]

    @editor = ->
      editor

    @click = ->
      editor.tool interact
  """
}]
