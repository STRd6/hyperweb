# Controls
# Context scoping is currently kind of a nightmare here
# The template needs special access to the editor to handle selecting a tool
# The tool event handler context and arguments need some thought

# Should template context be the same as script context? Probably... the fewer
# different contexts the better.

# Another note, the controls currently are using Hamlet template events
# rather than a unified event system with the base objects...

# How should Hamlet/"plain HTML" events be unified with the object event system?
[{
  template: """
    .tools
      - editor = @editor() # TODO: Better context handling of editor?
      - @tools.each (tool) ->
        - select = -> editor.tool tool
        %button(click=select)
          = tool.text
  """
  script: """
    @tools = Observable [{
      text: "Interact"
      click: (params) ->
        if this
          @trigger("click", params)
    }, {
      text: "Copy"
      click: ({event, object}) ->
        console.log event
        event.preventDefault()

        if object
          editor.addObject object.copy()
    }, {
      text: "Delete"
      click: ({event, object}) ->
        event.preventDefault()

        if object
          editor.remove object
    }, {
      text: "Inspect"
      click: ({event, object}) ->
        event.preventDefault()

        if object
          say JSON.stringify(object.copy(), null, 2)
    }]

    editor.tool(@tools.first())

    @editor = ->
      editor

    @click = ->
      editor.tool interact
  """
}]
