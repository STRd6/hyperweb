# Controls
# Context scoping is currently kind of a nightmare here
# The template needs special access to the editor to handle selecting a tool
# The tool event handler context and arguments need some thought

# Should template context be the same as script context? Probably... the fewer
# different contexts the better.

# Another note, the controls currently are using Hamlet template events
# rather than a unified event system with the base objects...

# How should Hamlet/"plain HTML" events be unified with the object event system?
[{
  template: """
    .tools
      - editor = @editor() # TODO: Better context handling of editor?
      - @tools.each (tool) ->
        - select = -> editor.tool tool
        %button(click=select)
          = tool.text
      - @actions.each (action) ->
        %button(click=action.perform)= action.name
  """
  script: """
    # TODO: This require is a path in the editor package
    saveAs = require("./lib/save_as")

    @tools = Observable [{
      text: "Interact"
      click: (params) ->
        if this
          @trigger("click", params)
    }, {
      text: "Copy"
      click: ({event, object}) ->
        event.preventDefault()

        if object
          editor.addObject object.copy()
    }, {
      text: "Delete"
      click: ({event, object}) ->
        event.preventDefault()

        if object
          editor.remove object
    }, {
      text: "Inspect"
      click: ({event, object}) ->
        event.preventDefault()

        if object
          say JSON.stringify(object.copy(), null, 2)
    }]

    # TODO: Finish move tool
    moveTool = do ->
      moveObject = null
      initialPosition = null

      text: "Move"
      mousedown: ({event, object}) ->
        if moveObject = object
          initialPosition = Point(event.x, event.y)

          console.log initialPosition

      mousemove: ->
        if moveObject
          ;

      mouseup: ->
        moveObject = null

    @tools.push moveTool

    editor.tool(@tools.first())

    @actions = Observable [{
      name: "Save"
      perform: ->
        blob = new Blob [JSON.stringify(editor.toJSON(), null, 2)],
          type: "application/json"
        saveAs(blob, "app.json")
    }, {
      name: "Reload"
      perform: ->
        editor.load editor.toJSON()
    }, {
      name: "Load"
      perform: ->
        openFile("*.json").then editor.load
    }, {
      name: "Save App"
      perform: ->
        appData = JSON.stringify(editor.toJSON())
        code = require('require').packageWrapper(PACKAGE, "require('./main').load(\#{appData})")

        # TODO: Better remote deps management
        content = "<html><head><meta charset='utf-8'><script src='https://cdnjs.cloudflare.com/ajax/libs/coffee-script/1.7.1/coffee-script.min.js'><\\/script></head><body><script>\#{code}<\\/script></body></html>"

        blob = new Blob [content],
          type: "text/html"

        saveAs(blob, "app.html")
    }]

    @editor = ->
      editor

    @click = ->
      editor.tool interact
  """
}]
